From 83b25b7d9d2c32658671e5a3eace5fd9fb9ae6b9 Mon Sep 17 00:00:00 2001
From: "roger.lin" <roger.lin@fitipower.com>
Date: Tue, 10 May 2022 12:26:52 +0800
Subject: [PATCH 1/3] support AoT Mode for yolov5 model

---
 python/tvm/contrib/utils.py                   |   2 +-
 tests/micro/zephyr/test_utils.py              |  13 +-
 tests/micro/zephyr/test_zephyr_aot_keyword.py | 147 ++++++++++++++++
 tests/micro/zephyr/test_zephyr_aot_yolo.py    | 157 ++++++++++++++++++
 4 files changed, 314 insertions(+), 5 deletions(-)
 create mode 100644 tests/micro/zephyr/test_zephyr_aot_keyword.py
 create mode 100644 tests/micro/zephyr/test_zephyr_aot_yolo.py

diff --git a/python/tvm/contrib/utils.py b/python/tvm/contrib/utils.py
index e2ca18277..6e0adefe2 100644
--- a/python/tvm/contrib/utils.py
+++ b/python/tvm/contrib/utils.py
@@ -42,7 +42,7 @@ class TempDirectory(object):
 
     # When True, all TempDirectory are *NOT* deleted and instead live inside a predicable directory
     # tree.
-    _KEEP_FOR_DEBUG = False
+    _KEEP_FOR_DEBUG = True
 
     # In debug mode, each tempdir is named after the sequence
     _NUM_TEMPDIR_CREATED = 0
diff --git a/tests/micro/zephyr/test_utils.py b/tests/micro/zephyr/test_utils.py
index e0aad7c3c..79044a816 100644
--- a/tests/micro/zephyr/test_utils.py
+++ b/tests/micro/zephyr/test_utils.py
@@ -197,7 +197,7 @@ def run_model(project):
 
 
 def generate_project(
-    temp_dir, board, west_cmd, lowered, build_config, sample, output_shape, output_type, load_cmsis
+    model_name, temp_dir, board, west_cmd, lowered, build_config, sample, output_shape, output_type, load_cmsis
 ):
     with tempfile.NamedTemporaryFile() as tar_temp_file:
         with tarfile.open(tar_temp_file.name, "w:gz") as tf:
@@ -209,9 +209,14 @@ def generate_project(
                     tf.add(
                         model_files_path, arcname=os.path.relpath(model_files_path, tar_temp_dir)
                     )
-                header_path = generate_c_interface_header(
-                    lowered.libmod_name, ["input_1"], ["Identity"], [], [], 0, model_files_path
-                )
+                if model_name == "yolov5":
+                    header_path = generate_c_interface_header(
+                        lowered.libmod_name, ["serving_default_input_1_0_int8"], ["StatefulPartitionedCall_0_int8"], [], {}, [], 0, model_files_path
+                    )
+                else:
+                    header_path = generate_c_interface_header(
+                        lowered.libmod_name, ["input_1"], ["Identity"], [], {}, [], 0, model_files_path
+                    )
                 tf.add(header_path, arcname=os.path.relpath(header_path, tar_temp_dir))
 
             create_header_file("input_data", sample, "include", tf)
diff --git a/tests/micro/zephyr/test_zephyr_aot_keyword.py b/tests/micro/zephyr/test_zephyr_aot_keyword.py
new file mode 100644
index 000000000..d812ac98f
--- /dev/null
+++ b/tests/micro/zephyr/test_zephyr_aot_keyword.py
@@ -0,0 +1,147 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+import io
+import logging
+import os
+import sys
+import logging
+import pathlib
+import shutil
+import tarfile
+import tempfile
+
+import pytest
+import numpy as np
+
+import tvm
+import tvm.testing
+from tvm.micro.project_api import server
+import tvm.relay as relay
+from tvm.relay.backend import Executor, Runtime
+
+from tvm.contrib.download import download_testdata
+from tvm.micro.testing import aot_transport_init_wait, aot_transport_find_message
+
+import test_utils
+#_LOG = logging.getLogger(__name__)
+
+@tvm.testing.requires_micro
+def test_tflite(temp_dir, board, west_cmd, tvm_debug):
+    """Testing a TFLite model."""
+    model = test_utils.ZEPHYR_BOARDS[board]
+    input_shape = (1, 49, 10, 1)
+    output_shape = (1, 12)
+    build_config = {"debug": tvm_debug}
+
+    model_url = "https://github.com/tlc-pack/web-data/raw/25fe99fb00329a26bd37d3dca723da94316fd34c/testdata/microTVM/model/keyword_spotting_quant.tflite"
+    model_path = download_testdata(model_url, "keyword_spotting_quant.tflite", module="model")
+
+    # Import TFLite model
+    tflite_model_buf = open(model_path, "rb").read()
+    try:
+        import tflite
+
+        tflite_model = tflite.Model.GetRootAsModel(tflite_model_buf, 0)
+    except AttributeError:
+        import tflite.Model
+
+        tflite_model = tflite.Model.Model.GetRootAsModel(tflite_model_buf, 0)
+
+    # Load TFLite model and convert to Relay
+    relay_mod, params = relay.frontend.from_tflite(
+        tflite_model, shape_dict={"input_1": input_shape}, dtype_dict={"input_1 ": "int8"}
+    )
+
+    target = tvm.target.target.micro(model)
+    executor = Executor(
+        "aot", {"unpacked-api": True, "interface-api": "c", "workspace-byte-alignment": 4}
+    )
+    runtime = Runtime("crt")
+    with tvm.transform.PassContext(opt_level=3, config={"tir.disable_vectorize": True}):
+        lowered = relay.build(relay_mod, target, params=params, runtime=runtime, executor=executor)
+
+    sample_url = "https://github.com/tlc-pack/web-data/raw/967fc387dadb272c5a7f8c3461d34c060100dbf1/testdata/microTVM/data/keyword_spotting_int8_6.pyc.npy"
+    sample_path = download_testdata(sample_url, "keyword_spotting_int8_6.pyc.npy", module="data")
+    sample = np.load(sample_path)
+    temp_dir_path = '/home/roger/tvm/tvm_workspace'
+    if os.path.isdir(temp_dir_path):
+        shutil.rmtree(temp_dir_path)
+    temp_dir=tvm.contrib.utils.TempDirectory(custom_path=temp_dir_path)
+    temp_dir.set_keep_for_debug(True)   #not work, debugging
+
+    project, _ = test_utils.generate_project(
+        "keyword_spotting",
+        temp_dir,
+        board,
+        west_cmd,
+        lowered,
+        build_config,
+        sample,
+        output_shape,
+        "int8",
+        load_cmsis=True,
+    )
+
+    result, time = test_utils.run_model(project)
+    print("got result:{0}, time:{1}".format(result,time))
+    assert result > 0
+
+'''
+@tvm.testing.requires_micro
+def test_qemu_make_fail(temp_dir, board, west_cmd, tvm_debug):
+    """Testing QEMU make fail."""
+    if board not in ["qemu_x86", "mps2_an521", "mps3_an547"]:
+        pytest.skip(msg="Only for QEMU targets.")
+
+    model = test_utils.ZEPHYR_BOARDS[board]
+    build_config = {"debug": tvm_debug}
+    shape = (10,)
+    dtype = "float32"
+
+    # Construct Relay program.
+    x = relay.var("x", relay.TensorType(shape=shape, dtype=dtype))
+    xx = relay.multiply(x, x)
+    z = relay.add(xx, relay.const(np.ones(shape=shape, dtype=dtype)))
+    func = relay.Function([x], z)
+    ir_mod = tvm.IRModule.from_expr(func)
+
+    target = tvm.target.target.micro(model)
+    executor = Executor("aot")
+    runtime = Runtime("crt")
+    with tvm.transform.PassContext(opt_level=3, config={"tir.disable_vectorize": True}):
+        lowered = relay.build(ir_mod, target, executor=executor, runtime=runtime)
+
+    sample = np.zeros(shape=shape, dtype=dtype)
+    project, project_dir = test_utils.generate_project(
+        temp_dir, board, west_cmd, lowered, build_config, sample, shape, dtype, load_cmsis=False
+    )
+
+    file_path = (
+        pathlib.Path(project_dir) / "build" / "zephyr" / "CMakeFiles" / "run.dir" / "build.make"
+    )
+    assert file_path.is_file(), f"[{file_path}] does not exist."
+
+    # Remove a file to create make failure.
+    os.remove(file_path)
+    project.flash()
+    with pytest.raises(server.JSONRPCError) as excinfo:
+        project.transport().open()
+    assert "QEMU setup failed" in str(excinfo.value)
+'''
+
+if __name__ == "__main__":
+    sys.exit(pytest.main([__file__] + sys.argv[1:]))
diff --git a/tests/micro/zephyr/test_zephyr_aot_yolo.py b/tests/micro/zephyr/test_zephyr_aot_yolo.py
new file mode 100644
index 000000000..d815ca1df
--- /dev/null
+++ b/tests/micro/zephyr/test_zephyr_aot_yolo.py
@@ -0,0 +1,157 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+import io
+import logging
+import os
+import sys
+import logging
+import pathlib
+import shutil
+import tarfile
+import tempfile
+
+import pytest
+import numpy as np
+
+from PIL import Image
+import tvm
+import tvm.testing
+from tvm.micro.project_api import server
+import tvm.relay as relay
+from tvm.relay.backend import Executor, Runtime
+
+from tvm.contrib.download import download_testdata
+from tvm.micro.testing import aot_transport_init_wait, aot_transport_find_message
+
+import test_utils
+#_LOG = logging.getLogger(__name__)
+
+@tvm.testing.requires_micro
+def test_tflite(temp_dir, board, west_cmd, tvm_debug):
+    """Testing a TFLite model."""
+    model = test_utils.ZEPHYR_BOARDS[board]
+    input_shape_name = "serving_default_input_1_0_int8"
+    input_shape = (1,160, 160, 3)
+    output_shape = (1, 1575,15)
+    build_config = {"debug": tvm_debug}
+
+    #model_url = "https://github.com/tlc-pack/web-data/raw/25fe99fb00329a26bd37d3dca723da94316fd34c/testdata/microTVM/model/keyword_spotting_quant.tflite"
+    #model_path = download_testdata(model_url, "keyword_spotting_quant.tflite", module="model")
+    model_path= '/home/roger/tvm/exp87-int8.tflite'
+    # Import TFLite model
+    tflite_model_buf = open(model_path, "rb").read()
+    try:
+        import tflite
+
+        tflite_model = tflite.Model.GetRootAsModel(tflite_model_buf, 0)
+    except AttributeError:
+        import tflite.Model
+
+        tflite_model = tflite.Model.Model.GetRootAsModel(tflite_model_buf, 0)
+
+    # Load TFLite model and convert to Relay
+    relay_mod, params = relay.frontend.from_tflite(
+        tflite_model, shape_dict={input_shape_name: input_shape}, dtype_dict={input_shape_name: "int8"}
+    )
+
+    target = tvm.target.target.micro(model)
+    executor = Executor(
+        "aot", {"unpacked-api": True, "interface-api": "c", "workspace-byte-alignment": 4}
+    )
+    runtime = Runtime("crt")
+    with tvm.transform.PassContext(opt_level=3, config={"tir.disable_vectorize": True}):
+        lowered = relay.build(relay_mod, target, params=params, runtime=runtime, executor=executor)
+
+    #sample_url = "https://github.com/tlc-pack/web-data/raw/967fc387dadb272c5a7f8c3461d34c060100dbf1/testdata/microTVM/data/keyword_spotting_int8_6.pyc.npy"
+    #sample_path = download_testdata(sample_url, "keyword_spotting_int8_6.pyc.npy", module="data")
+    #sample = np.load(sample_path)
+    img_url = "https://s3.amazonaws.com/model-server/inputs/kitten.jpg"
+    img_path = download_testdata(img_url, "imagenet_cat.png", module="data")
+    # Resize it to 160x160
+    resized_image = Image.open(img_path).resize((160, 160))
+    img_data = np.asarray(resized_image).astype("int8")
+    #print(graph_mod.get_input_info())
+    tensor_img_data = np.expand_dims(img_data, axis=0)
+
+    temp_dir_path = '/home/roger/tvm/tvm_workspace'
+    if os.path.isdir(temp_dir_path):
+        shutil.rmtree(temp_dir_path)
+    temp_dir=tvm.contrib.utils.TempDirectory(custom_path=temp_dir_path)
+    temp_dir.set_keep_for_debug(True)   #not work, debugging
+
+    project, _ = test_utils.generate_project(
+        "yolov5",
+        temp_dir,
+        board,
+        west_cmd,
+        lowered,
+        build_config,
+        tensor_img_data,
+        output_shape,
+        "int8",
+        load_cmsis=False,
+    )
+
+    result, time = test_utils.run_model(project)
+    print("got result:{0}, time:{1}".format(result,time))
+    assert result > 0
+
+'''
+@tvm.testing.requires_micro
+def test_qemu_make_fail(temp_dir, board, west_cmd, tvm_debug):
+    """Testing QEMU make fail."""
+    if board not in ["qemu_x86", "mps2_an521", "mps3_an547"]:
+        pytest.skip(msg="Only for QEMU targets.")
+
+    model = test_utils.ZEPHYR_BOARDS[board]
+    build_config = {"debug": tvm_debug}
+    shape = (10,)
+    dtype = "float32"
+
+    # Construct Relay program.
+    x = relay.var("x", relay.TensorType(shape=shape, dtype=dtype))
+    xx = relay.multiply(x, x)
+    z = relay.add(xx, relay.const(np.ones(shape=shape, dtype=dtype)))
+    func = relay.Function([x], z)
+    ir_mod = tvm.IRModule.from_expr(func)
+
+    target = tvm.target.target.micro(model)
+    executor = Executor("aot")
+    runtime = Runtime("crt")
+    with tvm.transform.PassContext(opt_level=3, config={"tir.disable_vectorize": True}):
+        lowered = relay.build(ir_mod, target, executor=executor, runtime=runtime)
+
+    sample = np.zeros(shape=shape, dtype=dtype)
+    project, project_dir = test_utils.generate_project(
+        temp_dir, board, west_cmd, lowered, build_config, sample, shape, dtype, load_cmsis=False
+    )
+
+    file_path = (
+        pathlib.Path(project_dir) / "build" / "zephyr" / "CMakeFiles" / "run.dir" / "build.make"
+    )
+    assert file_path.is_file(), f"[{file_path}] does not exist."
+
+    # Remove a file to create make failure.
+    os.remove(file_path)
+    project.flash()
+    with pytest.raises(server.JSONRPCError) as excinfo:
+        project.transport().open()
+    assert "QEMU setup failed" in str(excinfo.value)
+'''
+
+if __name__ == "__main__":
+    sys.exit(pytest.main([__file__] + sys.argv[1:]))
-- 
2.35.1


From 57ecf52ffd67bca535b23a9ba07f8774057c8ded Mon Sep 17 00:00:00 2001
From: "roger.lin" <roger.lin@fitipower.com>
Date: Tue, 10 May 2022 12:32:34 +0800
Subject: [PATCH 2/3] support Using SDRAM, support zephyr 3.0, fix in/out model
 name

---
 .../zephyr/template_project/src/aot_demo/main.c     | 13 +++++++++++--
 1 file changed, 11 insertions(+), 2 deletions(-)

diff --git a/apps/microtvm/zephyr/template_project/src/aot_demo/main.c b/apps/microtvm/zephyr/template_project/src/aot_demo/main.c
index 27d74d7ba..d64580034 100644
--- a/apps/microtvm/zephyr/template_project/src/aot_demo/main.c
+++ b/apps/microtvm/zephyr/template_project/src/aot_demo/main.c
@@ -20,7 +20,7 @@
 #include <assert.h>
 #include <float.h>
 #include <kernel.h>
-#include <power/reboot.h>
+#include <sys/reboot.h>
 #include <stdio.h>
 #include <string.h>
 #include <tvm/runtime/c_runtime_api.h>
@@ -40,7 +40,8 @@
 
 // WORKSPACE_SIZE defined in Project API Makefile
 
-static uint8_t g_aot_memory[WORKSPACE_SIZE];
+__attribute__((section("SDRAM2"))) static uint8_t g_aot_memory[WORKSPACE_SIZE];
+
 tvm_workspace_t app_workspace;
 
 // Transport Commands.
@@ -174,11 +175,19 @@ static uint8_t g_cmd_buf[128];
 static size_t g_cmd_buf_ind;
 
 void TVMInfer() {
+  /*
   struct tvmgen_default_inputs inputs = {
       .input_1 = input_data,
   };
   struct tvmgen_default_outputs outputs = {
       .Identity = output_data,
+  };*/
+
+  struct tvmgen_default_inputs inputs = {
+      .serving_default_input_1_0_int8 = input_data,
+  };
+  struct tvmgen_default_outputs outputs = {
+      .StatefulPartitionedCall_0_int8 = output_data,
   };
 
   StackMemoryManager_Init(&app_workspace, g_aot_memory, WORKSPACE_SIZE);
-- 
2.35.1


From e51812786d99215351dd3f47c164298507cd6ca8 Mon Sep 17 00:00:00 2001
From: "roger.lin" <roger.lin@fitipower.com>
Date: Thu, 12 May 2022 11:05:22 +0800
Subject: [PATCH 3/3] yolov5 detect postprocess and verification

---
 .../template_project/CMakeLists.txt.template  |   2 +-
 .../template_project/microtvm_api_server.py   |   2 +
 .../template_project/src/aot_demo/main.c      |  13 +-
 .../src/aot_demo/postprocess.cpp              | 214 ++++++++++++++++++
 python/tvm/micro/testing.py                   |   1 +
 tests/micro/zephyr/test_utils.py              |   4 +-
 tests/micro/zephyr/test_zephyr_aot_yolo.py    |  28 ++-
 7 files changed, 248 insertions(+), 16 deletions(-)
 create mode 100644 apps/microtvm/zephyr/template_project/src/aot_demo/postprocess.cpp

diff --git a/apps/microtvm/zephyr/template_project/CMakeLists.txt.template b/apps/microtvm/zephyr/template_project/CMakeLists.txt.template
index 17e9d75c7..0bd472e77 100644
--- a/apps/microtvm/zephyr/template_project/CMakeLists.txt.template
+++ b/apps/microtvm/zephyr/template_project/CMakeLists.txt.template
@@ -44,6 +44,6 @@ target_include_directories(tvm_model PRIVATE ${CMAKE_SOURCE_DIR}/include crt_con
 target_compile_options(tvm_model PRIVATE -Wno-unused-variable)  # TVM-generated code tends to include lots of these.
 target_link_libraries(app PRIVATE tvm_model)
 
-file(GLOB_RECURSE app_srcs src/**.c)
+file(GLOB_RECURSE app_srcs src/**.c src/**.cpp)
 target_sources(app PRIVATE ${app_srcs})
 target_include_directories(app PRIVATE crt_config ${CMAKE_SOURCE_DIR}/include crt/include)
diff --git a/apps/microtvm/zephyr/template_project/microtvm_api_server.py b/apps/microtvm/zephyr/template_project/microtvm_api_server.py
index 7d2fbd2f8..a32f256db 100644
--- a/apps/microtvm/zephyr/template_project/microtvm_api_server.py
+++ b/apps/microtvm/zephyr/template_project/microtvm_api_server.py
@@ -379,6 +379,8 @@ class Handler(server.ProjectAPIHandler):
                 "CONFIG_UART_INTERRUPT_DRIVEN=y\n"
                 "CONFIG_MAIN_STACK_SIZE=4096\n"
                 "CONFIG_MEMC=y\n"
+                "CONFIG_CPLUSPLUS=y\n"
+                "CONFIG_LIB_CPLUSPLUS=y\n"
                 "CONFIG_SYS_HEAP_BIG_ONLY=y"
                 "\n"
             )
diff --git a/apps/microtvm/zephyr/template_project/src/aot_demo/main.c b/apps/microtvm/zephyr/template_project/src/aot_demo/main.c
index d64580034..080547b48 100644
--- a/apps/microtvm/zephyr/template_project/src/aot_demo/main.c
+++ b/apps/microtvm/zephyr/template_project/src/aot_demo/main.c
@@ -28,7 +28,6 @@
 #include <tvm/runtime/crt/stack_allocator.h>
 #include <unistd.h>
 #include <zephyr.h>
-
 #include "input_data.h"
 #include "output_data.h"
 #include "tvmgen_default.h"
@@ -68,6 +67,7 @@ void TVMLogf(const char* msg, ...) {
   size = vsprintf(buffer, msg, args);
   va_end(args);
   TVMPlatformWriteSerial(buffer, (uint32_t)size);
+  k_sleep(K_MSEC(1));
 }
 
 void TVMPlatformAbort(tvm_crt_error_t error) {
@@ -174,7 +174,10 @@ static uint8_t main_rx_buf[128];
 static uint8_t g_cmd_buf[128];
 static size_t g_cmd_buf_ind;
 
+extern int post_process(int8_t* output, char * result_str);
+
 void TVMInfer() {
+  char result_str[256];
   /*
   struct tvmgen_default_inputs inputs = {
       .input_1 = input_data,
@@ -211,6 +214,9 @@ void TVMInfer() {
     }
   }
   TVMLogf("result:%d:%d\n", max_ind, (uint32_t)(elapsed_time * 1000));
+  */
+  post_process(output_data, result_str);
+  TVMLogf("result:%d:%s\n", (uint32_t)(elapsed_time * 1000),result_str);
 }
 
 // Execute functions based on received command
@@ -218,6 +224,7 @@ void command_ready(char* command) {
   if (strncmp(command, CMD_INIT, CMD_SIZE) == 0) {
     TVMPlatformWriteSerial(CMD_WAKEUP, sizeof(CMD_WAKEUP));
   } else if (strncmp(command, CMD_INFER, CMD_SIZE) == 0) {
+    TVMLogf("Roger debug start Infer\n");
     TVMInfer();
   } else {
     TVMPlatformWriteSerial(CMD_READY, sizeof(CMD_READY));
diff --git a/python/tvm/micro/testing.py b/python/tvm/micro/testing.py
index 81e29a92a..25f8cbdd8 100644
--- a/python/tvm/micro/testing.py
+++ b/python/tvm/micro/testing.py
@@ -58,6 +58,7 @@ def aot_transport_find_message(transport, expression: str, timeout_sec: int) ->
     while True:
         data = _read_line(transport, timeout)
         logging.debug("new line: %s", data)
+        print("new line: %s", data)
         if expression in data:
             return data
         timeout = max(0, timeout_sec - (time.monotonic() - start_time))
diff --git a/tests/micro/zephyr/test_utils.py b/tests/micro/zephyr/test_utils.py
index 79044a816..76ae071ee 100644
--- a/tests/micro/zephyr/test_utils.py
+++ b/tests/micro/zephyr/test_utils.py
@@ -189,8 +189,8 @@ def run_model(project):
 
     result_line = result_line.strip("\n")
     result_line = result_line.split(":")
-    result = int(result_line[1])
-    time = int(result_line[2])
+    time = int(result_line[1])
+    result = result_line[2]
     _LOG.info(f"Result: {result}\ttime: {time} ms")
 
     return result, time
-- 
2.35.1

